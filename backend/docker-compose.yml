version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fleet-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-fleetuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fleetpass123}
      POSTGRES_DB: ${DB_NAME:-fleetmanager}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fleet-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-fleetuser}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fleet-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - fleet-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass123}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fleet-backend
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${DB_USER:-fleetuser}:${DB_PASSWORD:-fleetpass123}@postgres:5432/${DB_NAME:-fleetmanager}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispass123}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-30d}
      WIALON_TOKEN: ${WIALON_TOKEN}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fleet-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fleet-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - fleet-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  fleet-network:
    driver: bridge